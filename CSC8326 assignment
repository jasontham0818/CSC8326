Command line used for CSC8326 analysis 
All the codes were used in MATE terminal in a virtual machine 

Data availability 
FRMPD1 gene download 
-wget https://rest.uniprot.org/uniprotkb/Q5SYB0.fasta

Identification of potential homologs 
setting up reference database (download of Swiss-prot currrent release)
-wget ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz

check the sequence available in reference database 
-zgrep ^\> uniprot_sprot.fasta.gz  | wc -l

Alignment with phmmer 
-phmmer -o output-phmmer.txt Q5SYB0.fasta uniprot_sprot.fasta.gz

Decompress of reference database for jackhmmer 
-gzip -d uniprot_sprot.fasta.gz

Jackhmmer alignment 
-jackhmmer -o output-jackhmmer.txt Q5SYB0 uniprot_sprot.fasta

Phylogenetic analysis 
sequence alignment
-mafft --auto mySequences > myAlignment

Removal of poorly aligning parts in myAlignment file 
-trimal -in myAlignment -phylip -automated1 -out trimmedAlignment

Generating a phylogenetic tree
-iqtree2 -s myAlignment -m MFP -bb 1000 -nt AUTO

3D structure visualisation 

Creating an alignment 
putting sequence in PIR format and save as target.ali 
>P1;target
sequence:target:::::::0.00: 0.00
MEELETSLFQTRKAHRIEQMVARWLRRSRDSSARAKVAAADGPARNPTQTLIPVRHTVKI
DKDTLLQDYGFHISESLPLTVVAVTAGGSAHGKLFPGDQILQMNNEPAEDLSWERAVDIL
REAEDSLSITVVRCTSGVPKSSFLTEEKRARLKTNPVKVHFAEEVLISGHSQGNSLLCMP
NVLKLYLENGQTKAFKFEANTTVKDIILTVKEKLSIRSIEYFALALEEQYSISRLHLLHE
EELIQQVVEREESHDYRCLFRVCFVPKDPLDLLKEDPVAFEYLYLQSCSDVLQERFAVEM
KCSSALRLAALHIQERIYACAQPQKISLKYIEKDWGIENFISPTLLRNMKGKDIKKAISF
HMKRNQNLLEPRQKQLISAAQLRLNYLQILGELKTYGGRIFNATLMLQDRESYIALLVGA
KYGISQVINSKLNIMSTLAEFANISRVELTEESEKVSVVKVYLQDVKVLTLLLESNSAKD
LACLIAGYYRLLVDPVTSIFLWPGNKQQAHRVSAEEGYESRACSDSEESSEVDCVLEPLS
DRRLVKLAPCRSLIKEEQPPGNSPTPEVARRGPSTCGASSTTDSAESEASDSANTESRGY
RTSGSSESMDALEEDDLDTCSSSRSTFFHFGSPGLAESIDSDSQEERSGIETSGFLCLLD
LAQRANPQCQKTEFSESAALETFGWAPELSTVRLDPRLYEGSHADYYSLCSSVSPASYLS
DSSESTASRQGGAPPAWGQQGWTEAQPSSMLEPLALHPPLAFEDGSSDEEYYDAADKLTP
PGPPSGPRDVSTAEPSATSLQNKASTSSPENSLPCGPDGRQPSRRGGVKKYAKTLRKRRS
FLQTDYTSQVSFPLVPSASLESVDDVCYYDREPYLALGAPSPTVSSLQDMQGEPGLLETK
ALGLLAPLRETKSTNPASRVMEMEPETMETKSVIDSRVSSISAIRFRIDPNNKENSGVVP
AASSSASTPHCSNPGSSGPDTAQARPSQILPLSQDLDGIAPKEPTIEHGDSSFSLSSGDP
NPDRACLASNPGLNNVSQGDTLELQLEPHVQLEMGLESFCTNHIQETAPKYTEPLLSPRD
EPRSDECGINPGEKIASIPTKEEPQGQLSLERDREVTNKNGTNVFQEESRKDSGDSPGDV
SNNVSQTLDISSPAGKIVTSLSLDAPVTGTEQIPPHPPRDPQGQSREPPGQGCQAQEQKL
FVELDLDPDFFLGKQTVSPAVPPEGIKAEAPNHVTGQDIAPRDSPEWVCFNPEPSLPEPL
PCPQEDPHLETSNHCLLSEGKSDSSSICLSAEKSFLCFAPESHPEVSASLRVATSLGFAG
MNEMVAPRIGMDQCSCQFSYATCFRGPQPETEEEDRDLEAHPMAPLTSPPSAGSPVVLPW
RPARAHSCTTAPLSRKSHIWPEYCSRALRQLKATPASTPEGFIQLMESLLELQDILETSW
GVGNKHPPEKCTWHFTESRSRLCMGSQKLLSSCRHVIRMDQSPEEMQGAVRDTFQHLVQL
AGLCFQFTDCSRCSARHREAAGNLRDVVYTYHQFIEAAKSTCERGYHDLSVKLLARQCTA
LTAAVFCLTQKFRASTAL

A script saved as align.py containing following details:

from modeller import *
from modeller.automodel import *

env = environ()
aln = alignment(env)

template='2edv'
chain='A'

tc=template+chain

mdl = model(env, file=template, model_segment=('FIRST:'+chain,'LAST:'+chain))
aln.append_model(mdl, align_codes=tc, atom_files=template+'.pdb')
aln.append(file='target.ali', align_codes='target')
aln.align2d()
aln.write(file='target-'+tc+'.ali', alignment_format='PIR')
aln.write(file='target-'+tc+'.pap', alignment_format='PAP')

command line to create alignment 
-mod9.25 align.py

Creating Models 
The models was saved as model.py containing following details:
from modeller import *
from modeller.automodel import *

log.verbose()
env = environ()


template='2P31'
chain='A'

tc=template+chain

class MyModel(automodel):
    def get_model_filename(self,sequence, id1, id2, file_ext):
        return sequence+'_'+`id2`+file_ext

    def special_restraints(self, aln):
        rsr = self.restraints

a = MyModel(env, alnfile='target-'+tc+'.ali',
          knowns=tc, sequence='target',
          assess_methods=(assess.DOPE, assess.GA341))
a.starting_model = 1
a.ending_model = 5
a.make()

Commandline to create alignment 
-mod9.25 model.py

Improving the models with scripts and reference from PSIPRED:
from modeller import *
from modeller.automodel import *

log.verbose()
env = environ()

template='2edv'
chain='A'
tc=template+chain

class MyModel(automodel):
    def get_model_filename(self,sequence, id1, id2, file_ext):
        return sequence+'_'+`id2`+file_ext

    def special_restraints(self, aln):
        rsr = self.restraints
        rsr.add(secondary_structure.alpha(self.residue_range('2:', '7:')))
        rsr.add(secondary_structure.alpha(self.residue_range('10:', '27:')))
        rsr.add(secondary_structure.alpha(self.residue_range('32:','35:')))
        rsr.add(secondary_structure.strand(self.residue_range('54:', '61:')))
        rsr.add(secondary_structure.strand(self.residue_range('71:','73:')))
        rsr.add(secondary_structure.strand(self.residue_range('79:', '84:')))
        rsr.add(secondary_structure.strand(self.residue_range('99:','103:')))
        rsr.add(secondary_structure.alpha(self.residue_range('108:','110:')))
        rsr.add(secondary_structure.strand(self.residue_range('127:', '133:')))
        rsr.add(secondary_structure.alpha(self.residue_range('140:','142:')))
        rsr.add(secondary_structure.alpha(self.residue_range('146:', '152:')))
        rsr.add(secondary_structure.strand(self.residue_range('158:', '161:')))
        rsr.add(secondary_structure.strand(self.residue_range('182:','187:')))
        rsr.add(secondary_structure.strand(self.residue_range('192:', '197:')))
        rsr.add(secondary_structure.alpha(self.residue_range('203:', '214:')))
        rsr.add(secondary_structure.strand(self.residue_range('218:','228:')))
        rsr.add(secondary_structure.strand(self.residue_range('234:', '237:')))
        rsr.add(secondary_structure.alpha(self.residue_range('244:','250:')))
        rsr.add(secondary_structure.strand(self.residue_range('256:', '264:')))
        rsr.add(secondary_structure.alpha(self.residue_range('269:','273:')))
        rsr.add(secondary_structure.alpha(self.residue_range('302:','318:')))
        rsr.add(secondary_structure.alpha(self.residue_range('328:', '335:')))
        rsr.add(secondary_structure.alpha(self.residue_range('337:','339:')))
        rsr.add(secondary_structure.alpha(self.residue_range('343:', '348:')))
        rsr.add(secondary_structure.alpha(self.residue_range('351:', '364:')))
        rsr.add(secondary_structure.alpha(self.residue_range('371:', '373:')))
        rsr.add(secondary_structure.alpha(self.residue_range('379:', '392:')))
        rsr.add(secondary_structure.strand(self.residue_range('399:','405:')))
        rsr.add(secondary_structure.strand(self.residue_range('413:', '419:')))
        rsr.add(secondary_structure.strand(self.residue_range('423:','428:')))
        rsr.add(secondary_structure.strand(self.residue_range('434:', '440:')))
        rsr.add(secondary_structure.alpha(self.residue_range('441:','442:')))
        rsr.add(secondary_structure.strand(self.residue_range('444:','450:')))
        rsr.add(secondary_structure.strand(self.residue_range('456:', '463:')))
        rsr.add(secondary_structure.strand(self.residue_range('468:','473:')))
        rsr.add(secondary_structure.alpha(self.residue_range('476:', '492:')))
        rsr.add(secondary_structure.strand(self.residue_range('499:', '501:')))
        rsr.add(secondary_structure.alpha(self.residue_range('506:','507:')))
        rsr.add(secondary_structure.alpha(self.residue_range('526:', '528:')))
        rsr.add(secondary_structure.alpha(self.residue_range('533:', '536:')))
        rsr.add(secondary_structure.alpha(self.residue_range('585:','590:')))
        rsr.add(secondary_structure.alpha(self.residue_range('611:', '616:')))
        rsr.add(secondary_structure.alpha(self.residue_range('636:','638:')))
        rsr.add(secondary_structure.alpha(self.residue_range('646:', '648:')))
        rsr.add(secondary_structure.strand(self.residue_range('656:','657:')))
        rsr.add(secondary_structure.alpha(self.residue_range('658:','662:')))
        rsr.add(secondary_structure.alpha(self.residue_range('678:', '681:')))
        rsr.add(secondary_structure.alpha(self.residue_range('706:','709:')))
        rsr.add(secondary_structure.alpha(self.residue_range('770:', '771:')))
        rsr.add(secondary_structure.alpha(self.residue_range('832:', '836:')))
        rsr.add(secondary_structure.strand(self.residue_range('850:','851:')))
        rsr.add(secondary_structure.alpha(self.residue_range('896:', '898:')))
        rsr.add(secondary_structure.alpha(self.residue_range('900:','903:')))
        rsr.add(secondary_structure.alpha(self.residue_range('918:', '921:')))
        rsr.add(secondary_structure.alpha(self.residue_range('933:','936:')))
        rsr.add(secondary_structure.strand(self.residue_range('942:','945:')))
        rsr.add(secondary_structure.alpha(self.residue_range('1110:', '1117:')))
        rsr.add(secondary_structure.alpha(self.residue_range('1126:','1128:')))
        rsr.add(secondary_structure.strand(self.residue_range('1157:', '1159:')))
        rsr.add(secondary_structure.alpha(self.residue_range('1195:', '1203:')))
        rsr.add(secondary_structure.alpha(self.residue_range('1210:','1211:')))
        rsr.add(secondary_structure.alpha(self.residue_range('1269:', '1271:')))
        rsr.add(secondary_structure.alpha(self.residue_range('1290:', '1291:')))
        rsr.add(secondary_structure.alpha(self.residue_range('1402:','1412:')))
        rsr.add(secondary_structure.alpha(self.residue_range('1420:', '1438:')))
        rsr.add(secondary_structure.alpha(self.residue_range('1452:','1478:')))
        rsr.add(secondary_structure.alpha(self.residue_range('1483:','1506:')))
        rsr.add(secondary_structure.alpha(self.residue_range('1513:', '1543:')))
        rsr.add(secondary_structure.alpha(self.residue_range('1549:','1573:')))

a = MyModel(env, alnfile='target-'+tc+'.ali',
          knowns=tc, sequence='target',
          assess_methods=(assess.DOPE, assess.GA341))
a.starting_model = 1
a.ending_model = 5
a.make()

Running of the script:
-mod9.25 ImprovingScript.py

